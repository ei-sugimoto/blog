---
import { getCollection } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import ArticleCard from '../components/ArticleCard.astro';
import { getPublishedArticles, getAllTags } from '../utils/content';

const allArticles = await getCollection('articles');
const publishedArticles = getPublishedArticles(allArticles);
const allTags = getAllTags(publishedArticles);

// ページネーション（将来的な拡張のため）
const articlesPerPage = 10;
const currentPage = 1;
const startIndex = (currentPage - 1) * articlesPerPage;
const endIndex = startIndex + articlesPerPage;
const articles = publishedArticles.slice(startIndex, endIndex);
---

<BaseLayout title="Tech Blog - 技術ブログ" description="技術に関する記事を投稿する個人ブログです">
  <Header />
  
  <main class="flex-1 bg-white dark:bg-gray-900">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <!-- ヒーローセクション -->
      <section class="text-center mb-12">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4">
          Tech Blog
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-300 mb-8">
          技術に関する記事とメモを公開しています
        </p>
      </section>

      <!-- タグクラウド -->
      {allTags.length > 0 && (
        <section class="mb-12">
          <h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-6">
            タグ
          </h2>
          <div class="flex flex-wrap gap-2">
            {allTags.map((tag) => (
              <a 
                href={`/tags/${tag}`} 
                class="inline-block bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 px-3 py-1 rounded-full text-sm font-medium hover:bg-blue-100 dark:hover:bg-blue-900 hover:text-blue-800 dark:hover:text-blue-200 transition-colors"
              >
                #{tag}
              </a>
            ))}
          </div>
        </section>
      )}

      <!-- 記事一覧 -->
      <section>
        <h2 class="text-2xl font-semibold text-gray-900 dark:text-white mb-8">
          最新記事
        </h2>
        
        {articles.length === 0 ? (
          <div class="text-center py-12">
            <p class="text-gray-600 dark:text-gray-400 text-lg">
              まだ記事が投稿されていません。
            </p>
          </div>
        ) : (
          <div class="grid gap-6 md:gap-8">
            {articles.map((article) => (
              <ArticleCard
                title={article.data.title}
                date={article.data.date}
                description={article.data.description}
                tags={article.data.tags}
                slug={article.slug}
                category={article.data.category}
              />
            ))}
          </div>
        )}

        <!-- ページネーション（将来的な拡張） -->
        {publishedArticles.length > articlesPerPage && (
          <nav class="mt-12 flex justify-center">
            <p class="text-gray-600 dark:text-gray-400 text-sm">
              {startIndex + 1} - {Math.min(endIndex, publishedArticles.length)} / {publishedArticles.length} 記事
            </p>
          </nav>
        )}
      </section>
    </div>
  </main>
  
  <Footer />
</BaseLayout>
